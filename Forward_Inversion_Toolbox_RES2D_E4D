%% ------------ 2D visualization of RES2DINV inversion results ------------
%
% Adrien Dimech - PhD Project - 10/07/2018
%
% -------------------------------------------------------------------------
% Matlab codes to prepare - process - visualize and interpret 3D time-lapse
% geolelectrical monitoring of a waste rock pile.
% -------------------------------------------------------------------------
%
% Feel free to visit : https://www.researchgate.net/profile/Adrien_Dimech
% for more information about my research or contact me for more information
% and data files : adrien.dimech@gmail.com
%
close all
load Inversion_1
load ELEC_1

load true_model.mat


%% 1.1) Importation of E4D results
% 10/07/2018
actif=1;
for o=1
    if actif==1
        for o=1
            % Récupération des données d'inversion
            for o=1
                
                % User selection of the sigma file
                for o=1
                    prompt = {sprintf('\n What is the sigma file that you wish to import? \n')};
                    dlg_title = 'Sigma File';
                    num_lines = 1;
                    defaultans = {'sigma.8'};
                    sigma_file = inputdlg(prompt,dlg_title,num_lines,defaultans);
                end
                
                clear Results_E4D
                clear Results_E4D_R
                % time lapse == 0 => 1 fichier de données unique
                Results_E4D_raw=csvread(sigma_file{1});
                Results_E4D=zeros(Results_E4D_raw(1)-2,2) ;
                for i=1:length(Results_E4D)
                    Results_E4D(i,1)=i;
                end
                Results_E4D(:,2)=Results_E4D_raw(4:end,1);
                % Conversion des données en Ohm.m
                Results_E4D_R=Results_E4D;
                Results_E4D_R(:,2)=1./Results_E4D(:,2);
            end
            
            % Récupération des données de maillage
            for o=1
                % NODE FILE
                for o=1
                    % User selection of the node file
                    for o=1
                        prompt = {sprintf('\n What is the NODE file that you wish to import? \n')};
                        dlg_title = 'Node File';
                        num_lines = 1;
                        defaultans = {'CELL_1_1D.1.node'};
                        node_file = inputdlg(prompt,dlg_title,num_lines,defaultans);
                    end
                    
                    clear NODE_raw
                    indice_NODE=csvread(node_file{1});
                    indice_NODE(2:end,:)=[];
                    
                    NODE_raw=dlmread(node_file{1},'',[1 0 indice_NODE 5]);
                    
                    NODE=NODE_raw(1:end,1:4);
                    
                    % MISE A ZERO DU ZERO (Z)
                    NODE(:,4)=NODE(:,4)-max(NODE(:,4));
                    
                    % MISE A ZERO DU ZERO (X)
                    NODE(:,2)=NODE(:,2)+10.5;
                    
                    
                    % CORRECTION DES COORDONNÉES
                    for o=1
                        %         % 1e limites
                        %         CORR_X=34.546+21.740;
                        %         CORR_Y=26.059-0.694;
                        %         CORR_Z=8.242-4.232;
                        %                 % 2e limites
                        %                 CORR_X=34.546+23.286;
                        %                 CORR_Y=26.059+0.435;
                        %                 CORR_Z=8.242-2.25;
                        %         % 3e limites
                        %         CORR_X=34.546+22.09;
                        %         CORR_Y=26.059-0.6657;
                        %         CORR_Z=8.242-4.179;
                        %         % 4e limites (TEST INV STATIQUE REGULARISEE)
                        %         CORR_X=34.546+22.04;
                        %         CORR_Y=26.059-0.666;
                        %         CORR_Z=8.242-4.179;
                        %                             % 5e limites (Version finale halde)
                        %                             CORR_X=34.64+23.19;
                        %                             CORR_Y=21.99+4.512;
                        %                             CORR_Z=8.177-2.185;
                        % 6e limites
                        %                     CORR_X=34.64+21.69;
                        %                     CORR_Y=21.99+3.387;
                        %                     CORR_Z=8.177-4.173;
                        %                             % inv de 244 images
                        %                             CORR_X=34.64+23.19;
                        %                             CORR_Y=21.99+4.512;
                        %                             CORR_Z=8.177-2.185;
                    end % NON APPLIQUÉE
                end
                
                % ELEMENT FILE
                for o=1
                    % User selection of the element file
                    for o=1
                        prompt = {sprintf('\n What is the ELEMENT file that you wish to import? \n')};
                        dlg_title = 'Element File';
                        num_lines = 1;
                        defaultans = {'CELL_1_1D.1.ele'};
                        element_file = inputdlg(prompt,dlg_title,num_lines,defaultans);
                    end
                    
                    clear ELEMENT_raw
                    indice_ELEMENT=csvread(element_file{1});
                    indice_ELEMENT(2:end,:)=[];
                    
                    ELEMENT_raw=dlmread(element_file{1},'',[0 0 indice_ELEMENT 5]);
                    
                    ELEMENT=ELEMENT_raw(2:end,1:5);
                    L_ELEMENT=length(ELEMENT(:,1));
                end
            end
            
            % Calcul des éléments du maillage matlab
            for o=1
                % Création du maillage E4D pour matlab
                for o=1
                    clear Node_Element
                    for i=1:4
                        Node_Element{i}(:,1:3)=NODE(ELEMENT(:,i+1),2:4);
                    end
                end
                
                % Calcul des barycentres
                for o=1
                    clear Barycentre
                    for i=1:max(ELEMENT(:,1))
                        Barycentre(i,1)=i;
                    end
                    Barycentre(:,2:4)=(Node_Element{1}(:,1:3)+Node_Element{2}(:,1:3)+Node_Element{3}(:,1:3)+Node_Element{4}(:,1:3))/4;
                end
            end
        end
    end
end

%% 1.2) Redaction of protocol files for RES2DMOD
% 10/07/2018
actif=1;
for o=1
    if actif==1
        for o=1
            % Loading protocol file (with electrode index)
            load dipdip_41
            load wenner_schlum_41
            load dipdip_41_full
            load dipdip_82
            
            PROTOCOLE=dipdip_41;
            
            
            % User selection of ARRAY file parameters
            for o=1
                Name_Array_File='dipdip_41_high';
                Number_Configuration=length(PROTOCOLE(:,1));
                Unit_Electrode_Spacing=0.25;
                X_start_Electrode=0;
                Z_Electrodes=0;
                
                % X sensitivity settings
                X_start_Sensitivity=X_start_Electrode-10;
                X_end_Sensitivity=max(max((PROTOCOLE-1)*Unit_Electrode_Spacing+X_start_Electrode))+10;
                X_spacing_Sensitivity=Unit_Electrode_Spacing;
                
                % Z sensitivity settings
                Z_start_Sensitivity=0;
                Z_end_Sensitivity=10;
                Z_spacing_Sensitivity=0.1;
                
                % Material resistivity (ohm.m)
                Material_Resistivity=100;
                
                % Maximum current (Amp)
                Max_Current=1;
                
                % Minimum potential (mV)
                Min_Potential=0.1;
                
            end
            
            % Calculation of the Protocol file in terms of distance
            for o=1
                PROTOCOLE_M=(PROTOCOLE-1)*Unit_Electrode_Spacing+X_start_Electrode;
            end
            
            % Redaction of the ARRAY file
            for o=1
                
                % Heading
                fileID = fopen([Name_Array_File,'.txt'],'w');
                
                % Title
                fprintf(fileID,'%6s \r\n',Name_Array_File);
                
                % Number of configurations
                fprintf(fileID,'%6s \r\n','Number of configurations');
                fprintf(fileID,'%6.0f \r\n',Number_Configuration);
                
                % Unit Electrode Spacing
                fprintf(fileID,'%6s \r\n','Unit Electrode Spacing');
                fprintf(fileID,'%6.2f \r\n',Unit_Electrode_Spacing);
                
                % Redaction of configurations
                fprintf(fileID,'%6s \r\n','Coordinates of electrodes (xc1,zc1,xc2,zc2,xp1,zp1,xp2,zp2')
                for i=1:Number_Configuration
                    fprintf(fileID,'%6s \r\n',['Configuration ',num2str(i)]);
                    % C1 C2 P1 P2
                    for j=1:4
                        % X
                        fprintf(fileID,'%6.2f',PROTOCOLE_M(i,j));
                        fprintf(fileID,'%6s',',');
                        % Z
                        fprintf(fileID,'%6.2f',Z_Electrodes);
                        fprintf(fileID,'%6s \r\n','');
                    end
                end
                
                % Sensitivity setting
                for o=1
                    % Starting and ending x-location to calculate sensitivity values, spacing
                    for o=1
                        fprintf(fileID,'%6s \r\n','Starting and ending x-location to calculate sensitivity values, spacing');
                        fprintf(fileID,'%6.2f',X_start_Sensitivity);
                        fprintf(fileID,'%6s',',');
                        fprintf(fileID,'%6.2f',X_end_Sensitivity);
                        fprintf(fileID,'%6s',',');
                        fprintf(fileID,'%6.2f',X_spacing_Sensitivity);
                        fprintf(fileID,'%6s \r\n','');
                    end
                  
                     % Starting and ending z-location to calculate sensitivity values, spacing
                    for o=1
                        fprintf(fileID,'%6s \r\n','Starting and ending z-location to calculate sensitivity values, spacing');
                        fprintf(fileID,'%6.2f',Z_start_Sensitivity);
                        fprintf(fileID,'%6s',',');
                        fprintf(fileID,'%6.2f',Z_end_Sensitivity);
                        fprintf(fileID,'%6s',',');
                        fprintf(fileID,'%6.2f',Z_spacing_Sensitivity);
                        fprintf(fileID,'%6s \r\n','');
                    end
                    
                   	% Maximum current (Amp)
                    fprintf(fileID,'%6s \r\n','Material resistivity (ohm.m)');
                    fprintf(fileID,'%6.2f \r\n',Material_Resistivity);
                    
                    % Maximum current (Amp)
                    fprintf(fileID,'%6s \r\n','Maximum current (Amp)');
                    fprintf(fileID,'%6.2f \r\n',Max_Current);
                    
                         % Minimum potential (mV)
                    fprintf(fileID,'%6s \r\n','Minimum potential (mV)');
                    fprintf(fileID,'%6.2f \r\n',Min_Potential);
    
                end
            end
        end
    end
end

%% 1.3) Comparison of model and inversion results RES2DINV
% 10/07/2018
actif=1;
for o=1
    if actif==1
        DATA_TO_PLOT=Inversion_1;
        
        DATA_TO_PLOT(:,4)=log(DATA_TO_PLOT(:,3));
        
        % Affichage de l'histogramme des données log
        for o=1
            figure('Color', [ 1 1 1])
            histogram(DATA_TO_PLOT(DATA_TO_PLOT(:,4)<12,4),100)
            title('Histogramme de valeurs de résistivité (Ohm.m)','FontSize',16)
            
            TicksM = [2;3;4;5;6;7];
            ax = gca;
            ax.XTick=[2;3;4;5;6;7];
            ax.XTickLabel =round(exp(TicksM),0);
            grid
            grid minor
        end
        
        % User selection of the resistivity range
        for o=1
            % Troncature MIN au choix de l'utilisateur
            p = get(gcf,'Position');
            for o=1
                d = dialog('Position',[p(1)+800,p(2)+300,400,400],'Name','Choix de la valeur minimale de resistivité');
                
                txt = uicontrol('Parent',d,...
                    'Style','text',...
                    'Position',[100 200 210 80],...
                    'String',['Select the minimum resistivity value needed in Ohm.m (log values)'],...
                    'Fontsize',10);
                
                btn = uicontrol('Parent',d,...
                    'Position',[170 20 70 25],...
                    'String','Close',...
                    'Callback','delete(gcf)');
            end % Dialog box
            
            CutOff_MIN=ginput(1);
            CutOff_MIN=round(CutOff_MIN(:,1),2);
            
            % Troncature MAX au choix de l'utilisateur
            p = get(gcf,'Position');
            for o=1
                d = dialog('Position',[p(1)+800,p(2)+300,400,400],'Name','Choix de la valeur maximale de resistivité');
                
                txt = uicontrol('Parent',d,...
                    'Style','text',...
                    'Position',[100 200 210 80],...
                    'String',['Select the maximum resistivity value needed in Ohm.m (log values)'],...
                    'Fontsize',10);
                
                btn = uicontrol('Parent',d,...
                    'Position',[170 20 70 25],...
                    'String','Close',...
                    'Callback','delete(gcf)');
            end % Dialog box
            
            CutOff_MAX=ginput(1);
            CutOff_MAX=round(CutOff_MAX(:,1),2);
            
            close
            % Data processing
            for o=1
                % Inversion Results
                for o=1
                    % Elevation => profondeur
                    DATA_TO_PLOT(:,2)=-DATA_TO_PLOT(:,2);
                    
                    % echelle de couleur de 0 a 1
                    % echelle de valeur de R_min a R_max
                    DATA_TO_PLOT(:,5)=DATA_TO_PLOT(:,4);
                    DATA_TO_PLOT(DATA_TO_PLOT(:,5)<=CutOff_MIN,5)=CutOff_MIN;
                    
                    DATA_TO_PLOT(DATA_TO_PLOT(:,5)>=CutOff_MAX,5)=CutOff_MAX;
                    
                    DATA_TO_PLOT(:,5)=DATA_TO_PLOT(:,5)-CutOff_MIN;
                    
                    DATA_TO_PLOT(:,5)=round(DATA_TO_PLOT(:,5)/(CutOff_MAX-CutOff_MIN)*100);
                    % 0->1
                    DATA_TO_PLOT(DATA_TO_PLOT(:,5)==0,5)=1;
                end
                
                % True Model
                for o=1
                    DATA_TO_PLOT_true=true_model;
                    % Elevation => profondeur
                    DATA_TO_PLOT_true(:,2)=-DATA_TO_PLOT_true(:,2);
                    
                    % echelle de couleur de 0 a 1
                    % echelle de valeur de R_min a R_max
                    DATA_TO_PLOT_true(:,4)=log(DATA_TO_PLOT_true(:,3));
                    DATA_TO_PLOT_true(:,5)=DATA_TO_PLOT_true(:,4);
                    DATA_TO_PLOT_true(DATA_TO_PLOT_true(:,5)<=CutOff_MIN,5)=CutOff_MIN;
                    
                    DATA_TO_PLOT_true(DATA_TO_PLOT_true(:,5)>=CutOff_MAX,5)=CutOff_MAX;
                    
                    DATA_TO_PLOT_true(:,5)=DATA_TO_PLOT_true(:,5)-CutOff_MIN;
                    
                    DATA_TO_PLOT_true(:,5)=round(DATA_TO_PLOT_true(:,5)/(CutOff_MAX-CutOff_MIN)*100);
                    % 0->1
                    DATA_TO_PLOT_true(DATA_TO_PLOT_true(:,5)==0,5)=1;
                end
            end
        end
        
        % Results visualization
        for o=1
            figure('Color', [ 1 1 1])
            colormap ((jet(100)));
            cmap = colormap;
            
            % Inversion results
            for o=1
                subplot(2,1,2)
                
                % Interpolation
                for o=1
                    dX=0.1;
                    Xmin=round(min(DATA_TO_PLOT(:,1)))-1;
                    Xmax=round(max(DATA_TO_PLOT(:,1)))+1;
                    
                    dZ=0.01;
                    Zmin=round(min(DATA_TO_PLOT(:,2)))-1;
                    Zmax=0;
                    
                    [X,Z] = meshgrid(Xmin:dX:Xmax,Zmin:dZ:Zmax);
                    value = griddata(DATA_TO_PLOT(:,1),DATA_TO_PLOT(:,2),DATA_TO_PLOT(:,5),X,Z,'linear');
                    
                    
                    % colormap ((jet(100)));
                    % cmap = colormap;
                    pcolor(X,Z,value);
                    shading flat
                    hold on
                    %contour(X,Z,value,5,'LineWidth',0.7,'LineColor','k')
                end
                
                % Electrodes
                for o=1
                    plot(ELEC_1(:,1),ELEC_1(:,2),'.k','Markersize',15)
                end
                
                % Data points
                for o=1
                    for i=1:length(DATA_TO_PLOT(:,1))
                        ind_color=DATA_TO_PLOT(i,5);
                        plot(DATA_TO_PLOT(i,1),DATA_TO_PLOT(i,2),'.k','Markersize',14)
                        hold on
                        plot(DATA_TO_PLOT(i,1),DATA_TO_PLOT(i,2),'.','Color',[cmap(ind_color,1) cmap(ind_color,2) cmap(ind_color,3)],'Markersize',10)
                        
                    end
                    daspect([1 1 1])
                end
                daspect([1 1 1])
                
                % Colorbar
                for o=1
                    % Légende
                    clear colorbar
                    colormap ((jet(100)));
                    colorbar;
                    caxis([0 100]);
                    TicksM = [1;20;40;60;80;100];
                    TicksL = round(exp((TicksM/100)*(CutOff_MAX-CutOff_MIN)+CutOff_MIN),0);
                    
                    
                    c=colorbar;
                    c.Label.String = 'Inverted bulk electrical resistivity (\Omega.m)';
                    c.Label.FontWeight='bold';
                    c.Label.FontSize=14;
                    c.Ticks=TicksM;
                    c.TickLabels={num2str(TicksL)};
                    c.Location='eastoutside';
                end
                
                title(sprintf('Inverted bulk electrical resistivity from the synthetic data (RES2DINV) \n'),'FontSize',14)
                
            end
            
            % True model
            for o=1
                subplot(2,1,1)
                
                % Interpolation
                for o=1
                    dX=0.1;
                    Xmin=round(min(DATA_TO_PLOT(:,1)))-1;
                    Xmax=round(max(DATA_TO_PLOT(:,1)))+1;
                    
                    dZ=0.01;
                    Zmin=round(min(DATA_TO_PLOT(:,2)))-1;
                    Zmax=0;
                    
                    [X,Z] = meshgrid(Xmin:dX:Xmax,Zmin:dZ:Zmax);
                    value_true = griddata(DATA_TO_PLOT_true(:,1),DATA_TO_PLOT_true(:,2),DATA_TO_PLOT_true(:,5),X,Z,'linear');
                    
                    
                    % colormap ((jet(100)));
                    % cmap = colormap;
                    pcolor(X,Z,value_true);
                    shading flat
                    hold on
                    %contour(X,Z,value_true,5,'LineWidth',0.7,'LineColor','k')
                end
                daspect([1 1 1])
                
                % Electrodes
                for o=1
                    plot(ELEC_1(:,1),ELEC_1(:,2),'.k','Markersize',15)
                end
                
                % Colorbar
                for o=1
                    % Légende
                    clear colorbar
                    colormap ((jet(100)));
                    colorbar;
                    caxis([0 100]);
                    TicksM = [1;20;40;60;80;100];
                    TicksL = round(exp((TicksM/100)*(CutOff_MAX-CutOff_MIN)+CutOff_MIN),0);
                    
                    
                    c=colorbar;
                    c.Label.String = 'True bulk electrical resistivity (\Omega.m)';
                    c.Label.FontWeight='bold';
                    c.Label.FontSize=14;
                    c.Ticks=TicksM;
                    c.TickLabels={num2str(TicksL)};
                    c.Location='eastoutside';
                end
                
                title(sprintf('Model of bulk electrical resistivity (RES2DMOD) \n'),'FontSize',14)
                
            end
            
        end
    end
end

%% 1.4) Comparison of model and inversion results E4D
% 10/07/2018
actif=1;
for o=1
    if actif==1
        % Selection of data points from the 3D model
        for o=1
            Xmin=-25;
            Xmax=25;
            Ymin=-0.05;
            Ymax=0.05;
            Zmin=-30;
            
            ELEMENT_SELECT=Barycentre(find(Barycentre(:,2)>Xmin & Barycentre(:,2)<Xmax & Barycentre(:,3)>Ymin & Barycentre(:,3)<Ymax & Barycentre(:,4)>Zmin),:);
        end
        
        % Creation of the database to plot
        for o=1
            clear DATA_TO_PLOT_E4D_R
            % X
            DATA_TO_PLOT_E4D_R(:,1)= ELEMENT_SELECT(:,2);
            % Z
            DATA_TO_PLOT_E4D_R(:,2)= ELEMENT_SELECT(:,4);
            % resistivity (Ohm.m)
            for i=1:length(DATA_TO_PLOT_E4D_R(:,1))
                DATA_TO_PLOT_E4D_R(i,3)= Results_E4D_R(ELEMENT_SELECT(i,1),2);
            end
        end
        
        DATA_TO_PLOT_E4D=DATA_TO_PLOT_E4D_R;
        
        DATA_TO_PLOT_E4D(:,4)=log(DATA_TO_PLOT_E4D(:,3));
        
        % User selection of the resistivity range
        for o=1
            % Data processing
            for o=1
                % Inversion Results
                for o=1
                    
                    % echelle de couleur de 0 a 1
                    % echelle de valeur de R_min a R_max
                    DATA_TO_PLOT_E4D(:,5)=DATA_TO_PLOT_E4D(:,4);
                    DATA_TO_PLOT_E4D(DATA_TO_PLOT_E4D(:,5)<=CutOff_MIN,5)=CutOff_MIN;
                    
                    DATA_TO_PLOT_E4D(DATA_TO_PLOT_E4D(:,5)>=CutOff_MAX,5)=CutOff_MAX;
                    
                    DATA_TO_PLOT_E4D(:,5)=DATA_TO_PLOT_E4D(:,5)-CutOff_MIN;
                    
                    DATA_TO_PLOT_E4D(:,5)=round(DATA_TO_PLOT_E4D(:,5)/(CutOff_MAX-CutOff_MIN)*100);
                    % 0->1
                    DATA_TO_PLOT_E4D(DATA_TO_PLOT_E4D(:,5)==0,5)=1;
                end
            end
        end
        
        % Results visualization
        for o=1
            figure('Color', [ 1 1 1])
            colormap ((jet(100)));
            cmap = colormap;
            
            % Inversion results
            for o=1
                subplot(2,1,2)
                
                % Interpolation
                for o=1
                    dX=0.1;
                    Xmin=round(min(DATA_TO_PLOT(:,1)))-1;
                    Xmax=round(max(DATA_TO_PLOT(:,1)))+1;
                    
                    dZ=0.01;
                    Zmin=round(min(DATA_TO_PLOT(:,2)))-1;
                    Zmax=0;
                    
                    [X,Z] = meshgrid(Xmin:dX:Xmax,Zmin:dZ:Zmax);
                    value = griddata(DATA_TO_PLOT_E4D(:,1),DATA_TO_PLOT_E4D(:,2),DATA_TO_PLOT_E4D(:,5),X,Z,'linear');
                    
                    
                    % colormap ((jet(100)));
                    % cmap = colormap;
                    pcolor(X,Z,value);
                    shading flat
                    hold on
                    %contour(X,Z,value,5,'LineWidth',0.7,'LineColor','k')
                end
                
                % Electrodes
                for o=1
                    plot(ELEC_1(:,1),ELEC_1(:,2),'.k','Markersize',15)
                end
                
                % Colorbar
                for o=1
                    % Légende
                    clear colorbar
                    colormap ((jet(100)));
                    colorbar;
                    caxis([0 100]);
                    TicksM = [1;20;40;60;80;100];
                    TicksL = round(exp((TicksM/100)*(CutOff_MAX-CutOff_MIN)+CutOff_MIN),0);
                    
                    
                    c=colorbar;
                    c.Label.String = 'Inverted bulk electrical resistivity (\Omega.m)';
                    c.Label.FontWeight='bold';
                    c.Label.FontSize=14;
                    c.Ticks=TicksM;
                    c.TickLabels={num2str(TicksL)};
                    c.Location='eastoutside';
                end
                daspect([ 1 1 1])
                title(sprintf('Inverted bulk electrical resistivity from the synthetic data (E4D) \n'),'FontSize',14)
                xlim([0 21])
            end
            
            % True model
            for o=1
                subplot(2,1,1)
                
                % Interpolation
                for o=1
                    dX=0.1;
                    Xmin=round(min(DATA_TO_PLOT(:,1)))-1;
                    Xmax=round(max(DATA_TO_PLOT(:,1)))+1;
                    
                    dZ=0.01;
                    Zmin=round(min(DATA_TO_PLOT(:,2)))-1;
                    Zmax=0;
                    
                    [X,Z] = meshgrid(Xmin:dX:Xmax,Zmin:dZ:Zmax);
                    value_true = griddata(DATA_TO_PLOT_true(:,1),DATA_TO_PLOT_true(:,2),DATA_TO_PLOT_true(:,5),X,Z,'linear');
                    
                    
                    % colormap ((jet(100)));
                    % cmap = colormap;
                    pcolor(X,Z,value_true);
                    shading flat
                    hold on
                    %contour(X,Z,value_true,5,'LineWidth',0.7,'LineColor','k')
                end
                daspect([1 1 1])
                
                % Electrodes
                for o=1
                    plot(ELEC_1(:,1),ELEC_1(:,2),'.k','Markersize',15)
                end
                
                % Colorbar
                for o=1
                    % Légende
                    clear colorbar
                    colormap ((jet(100)));
                    colorbar;
                    caxis([0 100]);
                    TicksM = [1;20;40;60;80;100];
                    TicksL = round(exp((TicksM/100)*(CutOff_MAX-CutOff_MIN)+CutOff_MIN),0);
                    
                    
                    c=colorbar;
                    c.Label.String = 'True bulk electrical resistivity (\Omega.m)';
                    c.Label.FontWeight='bold';
                    c.Label.FontSize=14;
                    c.Ticks=TicksM;
                    c.TickLabels={num2str(TicksL)};
                    c.Location='eastoutside';
                end
                
                title(sprintf('Model of bulk electrical resistivity (E4D) \n'),'FontSize',14)
                xlim([0 21])
            end
            
        end
    end
end
